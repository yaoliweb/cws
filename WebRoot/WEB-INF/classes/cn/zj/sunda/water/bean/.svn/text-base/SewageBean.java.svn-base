package cn.zj.sunda.water.bean;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Random;

import javax.faces.context.FacesContext;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.faces.model.SelectItem;
import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import cn.zj.sunda.water.bo.Administrator;
import cn.zj.sunda.water.bo.Area;
import cn.zj.sunda.water.bo.ControlLog;
import cn.zj.sunda.water.bo.ControlLogId;
import cn.zj.sunda.water.bo.DetectionData;
import cn.zj.sunda.water.bo.RunData;
import cn.zj.sunda.water.bo.Sewage;
import cn.zj.sunda.water.util.FacesUtils;

public class SewageBean extends BaseBean{

	private Integer sewageId;
	private Area area;
	private Administrator administrator;
	private Integer controlId;
	private String shortTitle;
	private String name;
	private String address;
	private Float coordinateX;
	private Float coordinateY;
	private String equipment1state;
	private String equipment2state;
	private String equipment3state;
	private String equipment4state;
	private String equipment5state="1";
	private Float detection1;
	private Float detection1ul;
	private Float detection1dl;
	private Float detection2;
	private Float detection2ul;
	private Float detection2dl;
	private Float detection3ul;
	private Float detection3;
	private Float detection3dl;
	private Float detection4;
	private Float detection4ul;
	private Float detection4dl;
	private Float detection5;
	private Float detection5ul;
	private Float detection5dl;
	private Float detection6=0f;
	private Float detection6ul=0f;
	private Float detection6dl=0f;
	public Integer getSewageId() {
		return sewageId;
	}
	public void setSewageId(Integer sewageId) {
		this.sewageId = sewageId;
	}
	public Area getArea() {
		return area;
	}
	public void setArea(Area area) {
		this.area = area;
	}
	public Administrator getAdministrator() {
		return administrator;
	}
	public void setAdministrator(Administrator administrator) {
		this.administrator = administrator;
	}
	
	public Integer getControlId() {
		return controlId;
	}
	public void setControlId(Integer controlId) {
		this.controlId = controlId;
	}
	public String getShortTitle() {
		return shortTitle;
	}
	public void setShortTitle(String shortTitle) {
		this.shortTitle = shortTitle;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public Float getCoordinateX() {
		return coordinateX;
	}
	public void setCoordinateX(Float coordinateX) {
		this.coordinateX = coordinateX;
	}
	public Float getCoordinateY() {
		return coordinateY;
	}
	public void setCoordinateY(Float coordinateY) {
		this.coordinateY = coordinateY;
	}
	public String getEquipment1state() {
		return equipment1state;
	}
	public void setEquipment1state(String equipment1state) {
		this.equipment1state = equipment1state;
	}
	public String getEquipment2state() {
		return equipment2state;
	}
	public void setEquipment2state(String equipment2state) {
		this.equipment2state = equipment2state;
	}
	public String getEquipment3state() {
		return equipment3state;
	}
	public void setEquipment3state(String equipment3state) {
		this.equipment3state = equipment3state;
	}
	public String getEquipment4state() {
		return equipment4state;
	}
	public void setEquipment4state(String equipment4state) {
		this.equipment4state = equipment4state;
	}
	public String getEquipment5state() {
		return equipment5state;
	}
	public void setEquipment5state(String equipment5state) {
		this.equipment5state = equipment5state;
	}
	public Float getDetection1() {
		return detection1;
	}
	public void setDetection1(Float detection1) {
		this.detection1 = detection1;
	}
	public Float getDetection1ul() {
		return detection1ul;
	}
	public void setDetection1ul(Float detection1ul) {
		this.detection1ul = detection1ul;
	}
	public Float getDetection1dl() {
		return detection1dl;
	}
	public void setDetection1dl(Float detection1dl) {
		this.detection1dl = detection1dl;
	}
	public Float getDetection2() {
		return detection2;
	}
	public void setDetection2(Float detection2) {
		this.detection2 = detection2;
	}
	public Float getDetection2ul() {
		return detection2ul;
	}
	public void setDetection2ul(Float detection2ul) {
		this.detection2ul = detection2ul;
	}
	public Float getDetection2dl() {
		return detection2dl;
	}
	public void setDetection2dl(Float detection2dl) {
		this.detection2dl = detection2dl;
	}
	public Float getDetection3ul() {
		return detection3ul;
	}
	public void setDetection3ul(Float detection3ul) {
		this.detection3ul = detection3ul;
	}
	public Float getDetection3() {
		return detection3;
	}
	public void setDetection3(Float detection3) {
		this.detection3 = detection3;
	}
	public Float getDetection3dl() {
		return detection3dl;
	}
	public void setDetection3dl(Float detection3dl) {
		this.detection3dl = detection3dl;
	}
	public Float getDetection4() {
		return detection4;
	}
	public void setDetection4(Float detection4) {
		this.detection4 = detection4;
	}
	public Float getDetection4ul() {
		return detection4ul;
	}
	public void setDetection4ul(Float detection4ul) {
		this.detection4ul = detection4ul;
	}
	public Float getDetection4dl() {
		return detection4dl;
	}
	public void setDetection4dl(Float detection4dl) {
		this.detection4dl = detection4dl;
	}
	public Float getDetection5() {
		return detection5;
	}
	public void setDetection5(Float detection5) {
		this.detection5 = detection5;
	}
	public Float getDetection5ul() {
		return detection5ul;
	}
	public void setDetection5ul(Float detection5ul) {
		this.detection5ul = detection5ul;
	}
	public Float getDetection5dl() {
		return detection5dl;
	}
	public void setDetection5dl(Float detection5dl) {
		this.detection5dl = detection5dl;
	}
	public Float getDetection6() {
		return detection6;
	}
	public void setDetection6(Float detection6) {
		this.detection6 = detection6;
	}
	public Float getDetection6ul() {
		return detection6ul;
	}
	public void setDetection6ul(Float detection6ul) {
		this.detection6ul = detection6ul;
	}
	public Float getDetection6dl() {
		return detection6dl;
	}
	public void setDetection6dl(Float detection6dl) {
		this.detection6dl = detection6dl;
	}
	private SelectItem[] areaItem;

	private SelectItem[] sewageItem;

	private String areaSelectIndex;
	private String sewageSelectIndex;
	
	private String areaSelectName;
	private String sewageSelectName;
	
	public String getAreaSelectIndex() {
		return areaSelectIndex;
	}
	
	public void setAreaSelectIndex(String areaSelectIndex) {
		this.areaSelectIndex = areaSelectIndex;
	}
	public String getSewageSelectIndex() {
		return sewageSelectIndex;
	}
	public void setSewageSelectIndex(String sewageSelectIndex) {
		this.sewageSelectIndex = sewageSelectIndex;
	}
	
	public String getAreaSelectName() {
			return areaSelectName;
	}
	public void setAreaSelectName(String areaSelectName) {
		this.areaSelectName = areaSelectName;
	}
	
	public String getSewageSelectName() {
		return sewageSelectName;
	}
	public void setSewageSelectName(String sewageSelectName) {
		this.sewageSelectName = sewageSelectName;
	}
	public SelectItem[] getAreaItem() {
		List<Area> list = this.serviceLocator.getAreaService().queryAllArea();
		areaItem = new SelectItem[list.size()+1];
		areaItem[0]=new SelectItem(0, "选择区县");
		for (int i = 0; i < list.size(); i++) {
			areaItem[i+1] = new SelectItem(i,list.get(i).getName());
		}
		
		return areaItem;
	}
	public void setAreaItem(SelectItem[] areaItem) {
		this.areaItem = areaItem;
	}
	public SelectItem[] getSewageItem() {
		String condition = "area.name = '"+this.areaSelectName+"'";
		List<Sewage> list = this.serviceLocator.getSewageService().querySewageByCondition(condition);
		sewageItem = new SelectItem[list.size()+1];
		sewageItem[0]=new SelectItem(0,"选择污水站点");
		for (int i = 0; i < list.size(); i++) {
			sewageItem[i+1] = new SelectItem(i,list.get(i).getShortTitle());
		}
		return sewageItem;
	}
	public void setSewageItem(SelectItem[] sewageItem) {
		this.sewageItem = sewageItem;
	}
	
	public void valuechange_area()
	{
		this.areaSelectName = areaItem[Integer.valueOf(this.areaSelectIndex)+1].getLabel();
		this.sewageSelectIndex="-1";
		this.managerSelectIndex="-1";
		//System.out.println(areaSelectName);
		
		HttpSession session =(HttpSession)FacesContext.getCurrentInstance().getExternalContext().getSession(true);
		session.setAttribute("areaSelectName", areaSelectName);
		
	}
	public void valuechanged_sewage()
	{
		this.sewageSelectName = sewageItem[Integer.valueOf(this.sewageSelectIndex)+1].getLabel();
		//System.out.println(sewageSelectName);
		HttpServletRequest request=(HttpServletRequest)FacesContext.getCurrentInstance().getExternalContext().getRequest();
		request.setAttribute("sewageSelectName", sewageSelectName);
		
		HttpSession session = ((HttpSession) FacesContext.getCurrentInstance()
				.getExternalContext().getSession(true));
		session.setAttribute("sewageSelectName", sewageSelectName);
		
		Sewage sewage = this.serviceLocator.getSewageService().querySewageByShorttitle(sewageSelectName);
		/*sewageId = sewage.getSewageId();
		area = sewage.getArea();
		controlId = sewage.getControlId();
		administrator = sewage.getAdministrator();
		shortTitle = sewage.getShortTitle();
		name = sewage.getName();
		address = sewage.getAddress();
		coordinateX = sewage.getCoordinateX();
		coordinateY = sewage.getCoordinateY();*/
		equipment1state= sewage.getEquipment1state();
		equipment2state = sewage.getEquipment2state();
		equipment3state= sewage.getEquipment3state();
		equipment4state = sewage.getEquipment4state();
		equipment5state = sewage.getEquipment5state();
		detection1 = sewage.getDetection1();
		detection1ul = sewage.getDetection1ul();
		detection1dl = sewage.getDetection1dl();
		detection2= sewage.getDetection2();
		detection2ul = sewage.getDetection2ul();
		detection2dl = sewage.getDetection2dl();
		detection3ul = sewage.getDetection3ul();
		detection3 = sewage.getDetection3();
		detection3dl = sewage.getDetection3dl();
		detection4 = sewage.getDetection4();
		detection4ul = sewage.getDetection4ul();
		detection4dl = sewage.getDetection4dl();
		detection5 = sewage.getDetection5();
		detection5ul = sewage.getDetection5ul();
		detection5dl =sewage.getDetection5dl();
		detection6 = sewage.getDetection6();
		detection6ul =sewage.getDetection6ul();
		detection6dl = sewage.getDetection6dl();
		if(detection1ul == null)
		{
			detection1ul = Float.MAX_VALUE;
		}
		if(detection2ul == null)
		{
			detection2ul = Float.MAX_VALUE;
		}
		if(detection3ul == null)
		{
			detection3ul = Float.MAX_VALUE;
		}
		if(detection4ul == null)
		{
			detection4ul = Float.MAX_VALUE;
		}
		if(detection5ul == null)
		{
			detection5ul = Float.MAX_VALUE;
		}
		if(detection6ul == null)
		{
			detection6ul = Float.MAX_VALUE;
		}
		if(detection1dl ==null)
		{
			detection1dl = Float.MIN_VALUE;
		}
		if(detection2dl ==null)
		{
			detection2dl = Float.MIN_VALUE;
		}
		if(detection3dl ==null)
		{
			detection3dl = Float.MIN_VALUE;
		}
		if(detection4dl ==null)
		{
			detection4dl = Float.MIN_VALUE;
		}
		if(detection5dl ==null)
		{
			detection5dl = Float.MIN_VALUE;
		}
		if(detection6dl ==null)
		{
			detection6dl = Float.MIN_VALUE;
		}
	}
	private String tempid;
	
	public String getTempid() {
		String sewageId = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap().get("sewageid");
		HttpSession session = ((HttpSession) FacesContext.getCurrentInstance()
				.getExternalContext().getSession(true));
		session.setAttribute("tempid", sewageId);
		return tempid;

	}
	public void setTempid(String tempid) {
		this.tempid = tempid;
	}
	

	public void paint(OutputStream out, Object data) {
		
		int paintDataHeight = 600;
		int paintDataWidth = 800;
		HttpSession session = ((HttpSession) FacesContext.getCurrentInstance()
				.getExternalContext().getSession(true));
		String tempid = (String)session.getAttribute("tempid");
		HttpServletRequest request = (HttpServletRequest) FacesContext
		.getCurrentInstance().getExternalContext().getRequest();
		String imagePath  = request.getRealPath("/") + "images\\map.jpg";
		try {
			InputStream in = new BufferedInputStream(new FileInputStream(imagePath));
			BufferedImage bimage = new BufferedImage(paintDataWidth,
					paintDataHeight, BufferedImage.TYPE_INT_RGB); // 缓存图片对象
			BufferedInputStream ins = new BufferedInputStream(in); // 生成缓存输入流
			bimage = ImageIO.read(ins);
			Graphics2D graphics2D = bimage.createGraphics();
			Sewage sewage = this.serviceLocator.getSewageService().querySewageById(Integer.valueOf(tempid));
			String detection1=sewage.getDetection1().toString();
			String detection2=sewage.getDetection2().toString();
			String detection3=sewage.getDetection3().toString();
			String detection4=sewage.getDetection4().toString();
			String detection5=sewage.getDetection5().toString();
			
			Random r = new Random();
			float ls = r.nextInt(1000)/100*1.0f;
			float ph = r.nextInt(1000)/100*1.0f;
			float orp =r.nextInt(10000)/100*1.0f;
			float flow = r.nextInt(1000)/100*1.0f;
			float t = r.nextInt(10000)/100*1.0f;
			//String detection2=sewage.getDetection2().toString();
			
			graphics2D.setColor(Color.black);
			graphics2D.fillRect(411, 121, 36, 15);
			graphics2D.fillRect(411, 140, 36, 15);
			graphics2D.fillRect(411, 159, 36, 15);
			graphics2D.fillRect(411, 178, 36, 15);
			graphics2D.fillRect(411, 197, 36, 15);
			graphics2D.setColor(Color.white);
			graphics2D.drawString(String.valueOf(ls), 415, 135);
			graphics2D.drawString(String.valueOf(ph), 415, 154);
			graphics2D.drawString(String.valueOf(orp), 415, 173);
			graphics2D.drawString(String.valueOf(flow), 415, 192);
			graphics2D.drawString(String.valueOf(t), 415, 211);
			/*graphics2D.drawString(detection1, 415, 135);
			graphics2D.drawString(detection2, 415, 154);
			graphics2D.drawString(detection3, 415, 173);
			graphics2D.drawString(detection4, 415, 192);
			graphics2D.drawString(detection5, 415, 211);*/
			Font f=new Font("Serif",Font.BOLD,48);//创建一个Font对象，传入字体名，风格，大小
			graphics2D.setFont(f);
			graphics2D.setColor(Color.green);
			graphics2D.drawString(sewage.getShortTitle(), 120, 70);
			ImageIO.write(bimage, "jpeg", out);
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	//detectionData历史数据Benin
	public Date beginDate = new Date();
	public Date endDate = new Date();
	
	public Date getBeginDate() {
		return beginDate;
	}

	public void setBeginDate(Date beginDate) {
		this.beginDate = beginDate;
	}

	public Date getEndDate() {
		return endDate;
	}

	public void setEndDate(Date endDate) {
		this.endDate = endDate;
	}
	public String flag_detection = "0";//0:从首页地图超链接显示页面，1:通过点击查询按钮显示页面
	
	public String getFlag() {
		return flag_detection;
	}

	public void setFlag(String flag) {
		this.flag_detection = flag;
	}
	public DataModel wraplistDataModel_detection = new ListDataModel();

	public DataModel getWraplistDataModel_detection() {
		List<DetectionData> list = new ArrayList<DetectionData>();
		String condition = "";
		String sewageid = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap().get("sewageid");
		if(sewageid == null)
		{
			flag_detection="1";
		}
		if("0".equals(flag_detection))
		{
			this.sewageId =Integer.valueOf(sewageid);
			String today = new Date().toLocaleString();
			String[] dateA = today.split(" ");
			condition = "sewage.sewageId ="+sewageId+" and testingtime between '"+dateA[0]+" 00:00' and '"+dateA[0]+" 23:59'";
		}
		else
		{
			/*HttpSession session = ((HttpSession) FacesContext.getCurrentInstance()
					.getExternalContext().getSession(true));
			String sewageshorttitle = (String)session.getAttribute("sewageshorttitle");*/
			String sewageshorttitle =sewageSelectName;
			condition ="sewage.shortTitle ='"+sewageshorttitle+"' and testingtime between '"+this.beginDate.toLocaleString()+"' and '"+this.endDate.toLocaleString()+"'";
		}
		list = this.serviceLocator.getDetectionDataService().queryDetectionDataByCondition(condition);
		wraplistDataModel_detection.setWrappedData(list);
		//this.flag_detection="0";
		return wraplistDataModel_detection;
	}

	public void setWraplistDataModel_detection(DataModel wraplistDataModel) {
		this.wraplistDataModel_detection = wraplistDataModel;
	}
	//detectionData历史数据End
	
	//runData历史数据Begin
	public DataModel wraplistDataModel_rundata = new ListDataModel();
	public String flag_equipment = "0";//0:从首页地图超链接显示页面，1:通过点击查询按钮显示页面
	
	public DataModel getWraplistDataModel_rundata() {
		List<RunData> list = new ArrayList<RunData>();
		String condition = "";
		String sewageid = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap().get("sewageid");

		if(sewageid == null)
		{
			flag_equipment="1";
		}
		
		if("0".equals(flag_equipment))
		{
			String today = new Date().toLocaleString();
			String[] dateA = today.split(" ");
			condition = "sewage.sewageId ="+sewageId+" and testingtime between '"+dateA[0]+" 00:00' and '"+dateA[0]+" 23:59'";
		}
		else
		{
			/*HttpSession session = ((HttpSession) FacesContext.getCurrentInstance()
			.getExternalContext().getSession(true));
			String sewageshorttitle = (String)session.getAttribute("sewageshorttitle");*/
			String sewageshorttitle =sewageSelectName;
			condition ="sewage.shortTitle ='"+sewageshorttitle+"' and testingtime between '"+this.beginDate.toLocaleString()+"' and '"+this.endDate.toLocaleString()+"'";
		}
		
		list = this.serviceLocator.getRunDataService().queryRunDataByCondition(condition);			
		wraplistDataModel_rundata.setWrappedData(list);
		//flag_equipment="0";
		return wraplistDataModel_rundata;
	}
	public void setWraplistDataModel_rundata(DataModel wraplistDataModel) {
		this.wraplistDataModel_rundata = wraplistDataModel;
	}
	//runData历史数据End
	
	//点击监测记录页面的查询按钮，部分刷新列表
	public void selectAction()
	{
		this.flag_detection="1";
	}
	//污水站点管理
	private String delDataIDStr;

	public String getDelDataIDStr() {
		return delDataIDStr;
	}

	public void setDelDataIDStr(String delDataIDStr) {
		this.delDataIDStr = delDataIDStr;
	}

	public DataModel wraplistDataModel = new ListDataModel();

	public DataModel getWraplistDataModel() {

		List<Sewage> list = this.serviceLocator.getSewageService().queryAllSewage();
		wraplistDataModel.setWrappedData(list);
		return wraplistDataModel;
	}

	public void setWraplistDataModel(DataModel wraplistDataModel) {
		this.wraplistDataModel = wraplistDataModel;
	}
	
	public String sewageAddAction()
	{
		controlId=0;
		shortTitle="";
		name="";
		address="";
		coordinateX=0f;
		coordinateY=0f;
		equipment1state="1";
		equipment2state="1";
		equipment3state="1";
		equipment4state="1";
		equipment5state="1";
		detection1=0f;
		detection2=0f;
		detection3=0f;
		detection4=0f;
		detection5=0f;
		detection6=0f;
		return NavigationResults.SEWAGEADDACTION;
	}
	
	public String sewageAddSuccessAction()
	{
		Sewage sewage = new Sewage();
		String condition_area="name ='"+this.areaSelectName+"'";
		String condition_manager ="name ='"+this.manageSelectName+"'";
		Area area = this.serviceLocator.getAreaService().queryAreaByCondition(condition_area).get(0);
		Administrator manager = this.serviceLocator.getAdminService().queryAdministratorByCondition(condition_manager).get(0);
		sewage.setAddress(address);
		sewage.setAdministrator(manager);
		sewage.setArea(area);
		sewage.setControlId(controlId);
		sewage.setCoordinateX(coordinateX.doubleValue());
		sewage.setCoordinateY(coordinateY.doubleValue());
		sewage.setName(name);
		sewage.setShortTitle(shortTitle);
		sewage.setEquipment1state(equipment1state);
		sewage.setEquipment2state(equipment2state);
		sewage.setEquipment3state(equipment3state);
		sewage.setEquipment4state(equipment4state);
		sewage.setEquipment5state(equipment5state);
		sewage.setDetection1(detection1);
		sewage.setDetection1dl(detection1dl);
		sewage.setDetection1ul(detection1ul);
		sewage.setDetection2(detection2);
		sewage.setDetection2dl(detection2dl);
		sewage.setDetection2ul(detection2ul);
		sewage.setDetection3(detection3);
		sewage.setDetection3dl(detection3dl);
		sewage.setDetection3ul(detection3ul);
		sewage.setDetection4(detection4);
		sewage.setDetection4dl(detection4dl);
		sewage.setDetection4ul(detection4ul);
		sewage.setDetection5(detection5);
		sewage.setDetection5dl(detection5dl);
		sewage.setDetection5ul(detection5ul);		
		sewage.setDetection6(detection6);
		sewage.setDetection6dl(detection6dl);
		sewage.setDetection6ul(detection6ul);		
		this.serviceLocator.getSewageService().saveSewage(sewage);
		return NavigationResults.SEWAGEADDSUCCESSACTION;
	}
	private String areaname_edit;
	private String managername_edit;
	
	public String getAreaname_edit() {
		return areaname_edit;
	}
	public void setAreaname_edit(String areanameEdit) {
		areaname_edit = areanameEdit;
	}
	public String getManagername_edit() {
		return managername_edit;
	}
	public void setManagername_edit(String managernameEdit) {
		managername_edit = managernameEdit;
	}
	public String sewageEditAction()
	{
		String sewageId_s = FacesUtils.getRequestParameter("sewageId");
		Sewage sewage = this.serviceLocator.getSewageService().querySewageById(Integer.parseInt(sewageId_s));
		areaname_edit = sewage.getArea().getName();
		managername_edit = sewage.getAdministrator().getName();
		sewageId = sewage.getSewageId();
		controlId=sewage.getControlId();
		shortTitle=sewage.getShortTitle();
		name=sewage.getName();
		address=sewage.getAddress();
		coordinateX=sewage.getCoordinateX().floatValue();
		coordinateY=sewage.getCoordinateY().floatValue();
		equipment1state=sewage.getEquipment1state();
		equipment2state=sewage.getEquipment2state();
		equipment3state=sewage.getEquipment3state();
		equipment4state=sewage.getEquipment4state();
		equipment5state=sewage.getEquipment5state();
		detection1=sewage.getDetection1();
		detection1dl = sewage.getDetection1dl();
		detection1ul = sewage.getDetection1ul();
		detection2=sewage.getDetection2();
		detection2dl = sewage.getDetection2dl();
		detection2ul = sewage.getDetection2ul();		
		detection3=sewage.getDetection3();
		detection3dl = sewage.getDetection3dl();
		detection3ul = sewage.getDetection3ul();		
		detection4=sewage.getDetection4();
		detection4dl = sewage.getDetection4dl();
		detection4ul = sewage.getDetection4ul();		
		detection5=sewage.getDetection5();
		detection5dl = sewage.getDetection5dl();
		detection5ul = sewage.getDetection5ul();		
		//detection6=sewage.getDetection6();
		
		return NavigationResults.SEWAGEEDITACTION;
	}
	
	public String sewageEditSuccessAction()
	{
		Sewage sewage = this.serviceLocator.getSewageService().querySewageById(this.sewageId);
		if(areaSelectName !=null)
		{
			String condition_area="name ='"+this.areaSelectName+"'";
			Area area = this.serviceLocator.getAreaService().queryAreaByCondition(condition_area).get(0);
			sewage.setArea(area);
		}
		if(manageSelectName !=null)
		{
			String condition_manager ="name ='"+this.manageSelectName+"'";
			Administrator manager = this.serviceLocator.getAdminService().queryAdministratorByCondition(condition_manager).get(0);
			sewage.setAdministrator(manager);
		}		
		sewage.setAddress(address);
		sewage.setControlId(controlId);
		sewage.setCoordinateX(coordinateX.doubleValue());
		sewage.setCoordinateY(coordinateY.doubleValue());
		sewage.setName(name);
		sewage.setShortTitle(shortTitle);
		sewage.setEquipment1state(equipment1state);
		sewage.setEquipment2state(equipment2state);
		sewage.setEquipment3state(equipment3state);
		sewage.setEquipment4state(equipment4state);
		sewage.setEquipment5state(equipment5state);
		sewage.setDetection1(detection1);
		sewage.setDetection1dl(detection1dl);
		sewage.setDetection1ul(detection1ul);
		sewage.setDetection2(detection2);
		sewage.setDetection2dl(detection2dl);
		sewage.setDetection2ul(detection2ul);		
		sewage.setDetection3(detection3);
		sewage.setDetection3dl(detection3dl);
		sewage.setDetection3ul(detection3ul);		
		sewage.setDetection4(detection4);
		sewage.setDetection4dl(detection4dl);
		sewage.setDetection4ul(detection4ul);		
		sewage.setDetection5(detection5);
		sewage.setDetection5dl(detection5dl);
		sewage.setDetection5ul(detection5ul);		
		//sewage.setDetection6(detection6);
		this.serviceLocator.getSewageService().saveSewage(sewage);
		return NavigationResults.SEWAGEEDITSUCCESSACTION;
	}
	
	private SelectItem[] managerItem;
	private String managerSelectIndex;
	private String manageSelectName;
	public SelectItem[] getManagerItem() {
		String condition = "area.name = '"+this.areaSelectName+"'";
		List<Administrator> list = this.serviceLocator.getAdminService().queryAdministratorByCondition(condition);
		managerItem = new SelectItem[list.size()+1];
		managerItem[0]=new SelectItem(0,"选择该地区的管理员");
		for (int i = 0; i < list.size(); i++) {
			managerItem[i+1] = new SelectItem(i,list.get(i).getName());
		}
		return managerItem;
	}
	public void setManagerItem(SelectItem[] managerItem) {
		this.managerItem = managerItem;
	}
	public String getManagerSelectIndex() {
		return managerSelectIndex;
	}
	public void setManagerSelectIndex(String managerSelectIndex) {
		this.managerSelectIndex = managerSelectIndex;
	}
	public String getManageSelectName() {
		return manageSelectName;
	}
	public void setManageSelectName(String manageSelectName) {
		this.manageSelectName = manageSelectName;
	}
	public void valuechange_manager()
	{
		this.manageSelectName = managerItem[Integer.valueOf(this.managerSelectIndex)+1].getLabel();
		this.managerSelectIndex="-1";
	}
	public void deleteByIDs() {
		String temp = getDelDataIDStr();
		String[] ids = temp.split("@");
		this.serviceLocator.getSewageService().deleteByIds(ids);
	}
	
	private Long air;
	
	private Long water;
	
	private Long mud;
	
	private Long flow;
	
	private Long back_up = 2l;
	
	private ControlLogId controlLogId;
	
	/**
	 * @return the controlLogId
	 */
	public ControlLogId getControlLogId() {
		return controlLogId;
	}
	
	/**
	 * @param controlLogId the controlLogId to set
	 */
	public void setControlLogId(ControlLogId controlLogId) {
		this.controlLogId = controlLogId;
	}
	
	/**
	 * @return the air
	 */
	public Long getAir() {
		return air;
	}
	/**
	 * @param air the air to set
	 */
	public void setAir(Long air) {
		this.air = air;
	}
	/**
	 * @return the water
	 */
	public Long getWater() {
		return water;
	}
	/**
	 * @param water the water to set
	 */
	public void setWater(Long water) {
		this.water = water;
	}
	/**
	 * @return the mud
	 */
	public Long getMud() {
		return mud;
	}
	/**
	 * @param mud the mud to set
	 */
	public void setMud(Long mud) {
		this.mud = mud;
	}
	/**
	 * @return the flow
	 */
	public Long getFlow() {
		return flow;
	}
	/**
	 * @param flow the flow to set
	 */
	public void setFlow(Long flow) {
		this.flow = flow;
	}
	/**
	 * @return the back_up
	 */
	public Long getBack_up() {
		return back_up;
	}
	/**
	 * @param backUp the back_up to set
	 */
	public void setBack_up(Long backUp) {
		back_up = backUp;
	}	

	public void updateControlLog() {
		
		ControlLog controlLog = new ControlLog();
		
		Sewage sewage = this.serviceLocator.getSewageService().querySewageByShorttitle(sewageSelectName);

		HttpSession session = ((HttpSession) FacesContext.getCurrentInstance()
				.getExternalContext().getSession(true));
		Integer userid = (Integer) (session.getAttribute("userid"));
		
		ControlLogId controlLogId = new ControlLogId();
		controlLogId.setCreatedAt(new java.sql.Timestamp(new Date().getTime()));
		controlLogId.setUserId(userid.longValue());
		controlLogId.setSId(sewage.getControlId().longValue());
		
		controlLog.setId(controlLogId);
		controlLog.setAir(Long.valueOf(this.equipment1state));
		controlLog.setWater(Long.valueOf(this.equipment2state));
		controlLog.setMud(Long.valueOf(this.equipment3state));
		controlLog.setFlow(Long.valueOf(this.equipment4state));
		controlLog.setBackUp(back_up);
		
		this.serviceLocator.getSewageService().saveControlLog(controlLog);
		
	}
	
}
