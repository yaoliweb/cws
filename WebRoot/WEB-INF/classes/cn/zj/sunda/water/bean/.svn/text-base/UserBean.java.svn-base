package cn.zj.sunda.water.bean;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.faces.context.FacesContext;
import javax.faces.model.DataModel;
import javax.faces.model.ListDataModel;
import javax.servlet.http.HttpSession;

import cn.zj.sunda.water.bo.Csusers;
import cn.zj.sunda.water.bo.Rolemenu;
import cn.zj.sunda.water.bo.Roles;
import cn.zj.sunda.water.bo.Sewage;
import cn.zj.sunda.water.bo.Userrole;
import cn.zj.sunda.water.util.CipherUtil;
import cn.zj.sunda.water.util.FacesUtils;

public class UserBean extends BaseBean {
	// the username of the current user
	private String username;
	// the password of the current user
	private String cname;
	private String password;

	private String validateCode;

	private Integer roleid;

	private String dept;

	private String tel;

	public static Csusers user;
	public static Integer userid;

	public List<Csusers> wraplistUser = null;

	private DataModel listDataModel = new ListDataModel();

	private String delDataIDStr;

	private String selectroleIDStr;

	public  Set<Rolemenu> roleMenuSet = new HashSet<Rolemenu>();

	public String getSelectroleIDStr() {
		return selectroleIDStr;
	}

	public void setSelectroleIDStr(String selectroleIDStr) {
		this.selectroleIDStr = selectroleIDStr;
	}

	public String getDelDataIDStr() {
		return delDataIDStr;
	}

	public void setDelDataIDStr(String delDataIDStr) {
		this.delDataIDStr = delDataIDStr;
	}

	public List<Csusers> getWraplistUser() {
		return wraplistUser;
	}

	public void setWraplistUser(List<Csusers> wraplistUser) {
		this.wraplistUser = wraplistUser;
	}

	public DataModel getListDataModel() {
		wraplistUser = this.serviceLocator.getUserService().queryAllUsers();
		listDataModel.setWrappedData(wraplistUser);
		return listDataModel;
	}

	public void setListDataModel(DataModel listDataModel) {
		this.listDataModel = listDataModel;
	}

	public Csusers getUser() {
		return user;
	}

	public void setUser(Csusers user1) {
		user = user1;
	}

	public Integer getUserid() {
		return userid;
	}

	public void setUserid(Integer userid1) {
		userid = userid1;
	}

	public String getDept() {
		return dept;
	}

	public void setDept(String dept) {
		this.dept = dept;
	}

	public String getTel() {
		return tel;
	}

	public void setTel(String tel) {
		this.tel = tel;
	}

	public Integer getRoleid() {
		return roleid;
	}

	public void setRoleid(Integer roleid) {
		this.roleid = roleid;
	}

	public String getCname() {
		return cname;
	}

	public void setCname(String cname) {
		this.cname = cname;
	}

	public String getValidateCode() {
		return validateCode;
	}

	public void setValidateCode(String validateCode) {
		this.validateCode = validateCode;
	}
	public int orgNum;
	public String orgname;
	public String orgCameraName;

	public String getOrgCameraName() {
		return orgCameraName;
	}

	public void setOrgCameraName(String orgCameraName) {
		this.orgCameraName = orgCameraName;
	}

	public String getOrgname() {
		return orgname;
	}

	public void setOrgname(String orgname) {
		this.orgname = orgname;
	}

	public int getOrgNum() {
		return orgNum;
	}

	public void setOrgNum(int orgNum) {
		this.orgNum = orgNum;
	}

	public String loginAction() {
		try {
			/*总部用，分厂删除*/
			//CustomerContextHolder.setCustomerType(DataSourceMap.admin);
			/*总部用，分厂删除*/
			HttpSession session = ((HttpSession) FacesContext.getCurrentInstance()
					.getExternalContext().getSession(true));
			String key = (String) (session.getAttribute("verifyCode"));
			if (!key.equals(validateCode.toUpperCase())) {
				FacesUtils.addErrorMessage("验证码错误");
				return NavigationResults.RETRY;
			} else {
				user = this.serviceLocator.getUserService().login(this.username,
						this.password);
				if (user != null) {
					cname = user.getName();
					dept = user.getDept();
					userid = user.getUserid();

					Set<Userrole> userroles = user.getUserroles();
					Set<Rolemenu> roleMenus = null;
					Iterator it = userroles.iterator();
					List<Roles> roleList = new ArrayList();
					while (it.hasNext()) {
						Userrole userRole = (Userrole) it.next();
						Roles role = userRole.getRoles();
						roleList.add(role);
					}

					for (int i = 0; i < roleList.size(); i++) {
						roleMenuSet = roleList.get(i).getRolemenus();
					}
					session.setAttribute("roleMenu", roleMenuSet);
					session.setAttribute("user", username);
					session.setAttribute("userid",userid);
					MenuBean.menutype = 0;
					List<Sewage> allsewage = this.serviceLocator.getSewageService().queryAllSewage();
					session.setAttribute("allsewage", allsewage);

				} else {
					String msg = "密码错误";
					FacesUtils.addErrorMessage(msg + ", 请重新输入.");
					return NavigationResults.RETRY;
				}
			}
		} catch (IllegalStateException ee) {
			
		}
		
		return NavigationResults.SUCCESS;
	}

	public void logoutAction() {
		//this.logger.debug("Logout successfully.");
		HttpSession session = ((HttpSession) FacesContext.getCurrentInstance()
				.getExternalContext().getSession(false));
		session.invalidate();
		String path = FacesContext.getCurrentInstance().getExternalContext()
				.getRequestContextPath();
		try {
			FacesContext.getCurrentInstance().getExternalContext().redirect(
					path + "/login.faces");
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	public String getUsername() {
		return this.username;
	}

	public void setUsername(String newUsername) {
		this.username = newUsername;
	}

	public String getPassword() {
		return CipherUtil.generatePassword(this.password);
	}

	public void setPassword(String newPassword) {
		this.password = newPassword;
	}


	public String getDummyVariable() {
		return null;
	}

	public void clear() {
		this.username = null;
		this.password = null;
		this.validateCode = null;
	}

	public String addUserAction() {
		this.username = "";
		this.cname = "";
		this.dept = "";
		this.tel = "";
		return NavigationResults.ADDUSERACTION;
	}

	public String addUserSuccessAction() {
		List<Csusers> userexistNum = this.serviceLocator.getUserService()
				.queryUserByUserLogid(username);
		if (userexistNum.size() == 0) {
			Csusers user = new Csusers();
			user.setLogid(username);
			user.setLogpass(CipherUtil.generatePassword(username));
			user.setName(cname);
			user.setDept(dept);
			user.setTel(tel);
			this.serviceLocator.getUserService().saveUser(user);

			String[] selectIds = this.selectroleIDStr.split("@");
			for (int i = 0; i < selectIds.length; i++) {

				Roles r = this.serviceLocator.getRoleService().queryRoleById(
						Integer.valueOf(selectIds[i]));
				Userrole userRole = new Userrole();
				userRole.setRoles(r);
				userRole.setCsusers(user);

				this.serviceLocator.getRoleService().saveUserRole(userRole);

			}
			return NavigationResults.ADDUSERSUCCESSACTION;
		} else {
			String msg = "用户已存在";
			FacesUtils.addErrorMessage(msg + ", 请重新输入.");
			this.username = "";
			this.cname = "";
			this.dept = "";
			this.tel = "";
			return null;
		}

	}

	public void deleteByIDs() {
		String temp = this.getDelDataIDStr();
		// System.out.println(temp);
		String[] ids = temp.split("@");
		this.serviceLocator.getRoleService().deleteUserRole(ids);
		this.serviceLocator.getUserService().deleteUserByIds(ids);

	}

	public String editUserAction() {
		String userId = FacesContext.getCurrentInstance().getExternalContext()
				.getRequestParameterMap().get("userId");
		Csusers user = this.serviceLocator.getUserService().queryUserByUserId(
				Integer.valueOf(userId));
		username = user.getLogid();
		cname = user.getName();
		// password=user.getLogpass();
		dept = user.getDept();
		tel = user.getTel();
		userid = user.getUserid();
		return NavigationResults.EDITUSERACTION;

	}

	public String editUserSuccessAction() {
		Csusers user = this.serviceLocator.getUserService().queryUserByUserId(
				Integer.valueOf(userid));
		user.setLogid(username);
		user.setLogpass(CipherUtil.generatePassword(username));
		user.setName(cname);
		user.setDept(dept);
		user.setTel(tel);
		this.serviceLocator.getUserService().saveUser(user);
		List<Userrole> userRoleList = this.serviceLocator.getRoleService()
				.getUserRoleByUserId(userid);
		for (int i = 0; i < userRoleList.size(); i++) {
			this.serviceLocator.getRoleService().deleteUserRole(
					userRoleList.get(i));
		}
		String[] selectIds = this.selectroleIDStr.split("@");
		for (int i = 0; i < selectIds.length; i++) {

			Roles r = this.serviceLocator.getRoleService().queryRoleById(
					Integer.valueOf(selectIds[i]));
			Userrole userRole = new Userrole();
			userRole.setRoles(r);
			userRole.setCsusers(user);

			this.serviceLocator.getRoleService().saveUserRole(userRole);

		}

		return NavigationResults.EDITUSERSUCCESSACTION;
	}

	// ///////////////个人信息管理--修改密码
	private String oldpassword;
	private String newpassword;
	private String newpasswordagain;

	public String getOldpassword() {
		return oldpassword;
	}

	public void setOldpassword(String oldpassword) {
		this.oldpassword = oldpassword;
	}

	public String getNewpassword() {
		return newpassword;
	}

	public void setNewpassword(String newpassword) {
		this.newpassword = newpassword;
	}

	public String getNewpasswordagain() {
		return newpasswordagain;
	}

	public void setNewpasswordagain(String newpasswordagain) {
		this.newpasswordagain = newpasswordagain;
	}

	public void changePasswordAction() {
		if (!CipherUtil.validatePassword(user.getLogpass(), oldpassword)) {
			FacesUtils.addErrorMessage("原密码输入不正确,请重新输入");
			oldpassword = "";
		} else if (!newpassword.equals(newpasswordagain)) {
			FacesUtils.addErrorMessage("新密码输入不一致，请重新输入");
			newpassword = "";
			newpasswordagain = "";
		} else {
			user.setLogpass(CipherUtil.generatePassword(newpassword));
			this.serviceLocator.getUserService().saveUser(user);
		}

	}

}
